package patches.buildTypes

import jetbrains.buildServer.configs.kotlin.*
import jetbrains.buildServer.configs.kotlin.buildFeatures.swabra
import jetbrains.buildServer.configs.kotlin.buildSteps.ScriptBuildStep
import jetbrains.buildServer.configs.kotlin.buildSteps.script
import jetbrains.buildServer.configs.kotlin.ui.*

/*
This patch script was generated by TeamCity on settings change in UI.
To apply the patch, change the buildType with id = 'JourneyMakerV1'
accordingly, and delete the patch script.
*/
changeBuildType(RelativeId("JourneyMakerV1")) {
    check(artifactRules == "%env.JOURNEY_NAME%.txt") {
        "Unexpected option value: artifactRules = $artifactRules"
    }
    artifactRules = """
        %env.JOURNEY_NAME%.txt
        +:**/*
    """.trimIndent()

    params {
        remove {
            param("JOURNEY_SCRIPT", "")
        }
        add {
            param("env.AGENTS_POOL", "Default")
        }
    }

    expectSteps {
        script {
            id = "simpleRunner"
            scriptContent = """
                #!/usr/bin/env bash
                set -euo pipefail
                
                # ------------------------------------------------------------------
                # 1. Compose the target file name
                #    JOURNEY_NAME should be defined as an Environment / System
                #    parameter so it is available as ${'$'}JOURNEY_NAME
                # ------------------------------------------------------------------
                FILE_NAME="${'$'}{JOURNEY_NAME}.txt"
                
                # ------------------------------------------------------------------
                # 2. Write the parameter value into the file
                #    %JOURNEY_SCRIPT% is substituted by TeamCity → becomes a literal
                #    string inside the here-document, preserving line breaks.
                # ------------------------------------------------------------------
                cat > "${'$'}{FILE_NAME}" <<'EOF'
                %JOURNEY_SCRIPT%
                EOF
            """.trimIndent()
        }
        script {
            name = "Generate Journey Build"
            scriptContent = """
                #!/usr/bin/env bash
                set -euo pipefail
                
                # 1) Write the exact Kotlin source you supplied ------------------------------
                cat > "Journey.kt" <<'EOF'
                import jetbrains.buildServer.configs.kotlin.*
                
                object Journey_${'$'}{'${'$'}'}{FILE_NAME} : BuildType({
                    name = "${'$'}{'${'$'}'}{FILE_NAME}"
                
                    templates(JourneyExecutorTemplate)
                })
                EOF
                
                # 2) Base-64-encode it as one line (portable between Linux/macOS) ------------
                b64=${'$'}(base64 < Journey.kt | tr -d '\n')
                
                # 3) Build the JSON request ---------------------------------------------------
                payload=${'$'}(cat <<EOF
                {
                  "message": "Add Journey_${'$'}{JOURNEY_NAME}.kt",
                  "branch": "main",
                  "content": "${'$'}{b64}"
                }
                EOF
                )
                
                # 4) Upload (create or update) the file on GitHub ----------------------------
                curl -f -s \
                  -X PUT \
                  -H "Authorization: Bearer ${'$'}{GIT_PAT_TOKEN}" \
                  -H "Content-Type: application/json" \
                  --data "${'$'}{payload}" \
                  "https://api.github.com/repos/ChiriacCasian/TeamCityBuildServer/contents/.teamcity/Journey_FirstGeneratedJourney.kt"
                
                echo "✅ uploaded successfully"
            """.trimIndent()
        }
    }
    steps {
        update<ScriptBuildStep>(0) {
            clearConditions()
            scriptContent = """
                #!/usr/bin/env bash
                set -euo pipefail
                
                cat > "${'$'}{JOURNEY_NAME}_script.txt" <<'PY'
                import inspect
                import json
                import os
                import re
                import time
                import traceback
                from playwright.sync_api import Playwright, sync_playwright, expect
                
                
                def init():
                    global step_counter, steps_data, report_dir, screenshots_dir, page_source_dir
                    step_counter = 0
                    steps_data = []
                
                    report_dir = "report"
                    screenshots_dir = os.path.join(report_dir, "screenshots")
                    page_source_dir = os.path.join(report_dir, "page_sources")
                    os.makedirs(report_dir, exist_ok=True)
                    os.makedirs(screenshots_dir, exist_ok=True)
                    os.makedirs(page_source_dir, exist_ok=True)
                
                
                running = True
                init()
                
                
                
                
                def init_playwright(link):
                    global har_path, playwright, browser, context, page
                    har_path = os.path.join(report_dir, "network.har")
                    playwright = sync_playwright().start()
                    browser = playwright.chromium.launch(headless=False)
                
                    context = browser.new_context(record_har_path=har_path, record_video_dir=report_dir)
                    context.tracing.start(screenshots=True)
                
                    page = context.new_page()
                    page.set_default_timeout(36000)  # TODO make this configurable
                    page.goto(link)
                
                
                def close_playwright():
                    global playwright, browser, context, page, video_path, tracing_path
                    tracing_path = os.path.join(report_dir, "trace.zip")
                    context.tracing.stop(path=tracing_path)
                    video_path = os.path.relpath(page.video.path(), start=os.path.dirname(report_dir))
                    context.close()
                    browser.close()
                
                
                def save_playwright_report():
                    global steps_data, har_path, tracing_path, video_path
                    report = {
                        "steps": steps_data,
                        "har_file_path": har_path,
                        "tracing_file_path": tracing_path,
                        "video_file_path": video_path,
                    }
                
                    with open(os.path.join(report_dir, "steps_report.json"), "w") as f:
                        json.dump(report, f, indent=4)
                
                    playwright.stop()
                
                
                def step_playwright(action):
                    global running, step_counter
                
                    if not running:
                        return
                
                    print(f"Running step {step_counter}: {inspect.getsource(action)}")
                    start_time = time.perf_counter()
                    output = ""
                    try:
                        action()
                    except Exception as e:
                        full_trace = traceback.format_exc()
                        match = re.search(r"(waiting for locator\([^\)]+\))", full_trace)
                        if match:
                            output = match.group(1)
                        else:
                            output = full_trace
                    duration = time.perf_counter() - start_time
                
                    ss_path = f"{screenshots_dir}/screenshot_{step_counter}.png"
                    page.screenshot(path=ss_path)
                
                    page_source_path = f"{page_source_dir}/page_source_{step_counter}.html"
                    with open(page_source_path, "w", encoding="utf-8") as f:
                        f.write(page.content())
                
                    if output == "":
                        status = "SUCCESS"
                    else:
                        status = "FAILURE"
                        running = False
                
                    steps_data.append(
                        {
                            "index": step_counter,
                            "type": "web",
                            "status": status,
                            "duration": duration,
                            "output": output,
                            "screenshot_path": ss_path,
                            "page_source_path": page_source_path,
                        }
                    )
                    step_counter += 1
                
                
                
                
                init_playwright("https://recollectsapp.com/")
                step_playwright(lambda: (page.locator("section").filter(has_text="Cherish Today, Remember").get_by_role("link").click()))
                step_playwright(lambda: (page.get_by_role("radio", name="My camera roll is a mess, and").check()))
                step_playwright(lambda: (page.get_by_role("button", name="/5").click()))
                step_playwright(lambda: (page.get_by_role("radio", name="A tool to help me take fewer").check()))
                step_playwright(lambda: (page.get_by_role("button", name="/5").click()))
                step_playwright(lambda: (page.get_by_role("radio", name="Cloud storage is unorganized").check()))
                step_playwright(lambda: (page.get_by_role("button", name="/5").click()))
                close_playwright()
                save_playwright_report()
                PY
            """.trimIndent()
            param("teamcity.kubernetes.executor.pull.policy", "")
        }
        update<ScriptBuildStep>(1) {
            clearConditions()
            scriptContent = """
                payload=${'$'}(cat <<EOF
                {
                  "id"        : "SecondProject_Journey_${'$'}{JOURNEY_NAME}",
                  "name"      : "${'$'}{JOURNEY_NAME}",
                  "projectId" : "SecondProject",
                  "template": { "id": "SecondProject_JourneyExecutorTemplate" },
                  
                	"artifact-dependencies": {
                    "count": 1,
                    "artifact-dependency": [
                      {
                        "id": "ARTIFACT_DEPENDENCY_2",
                        "type": "artifact_dependency",
                        "properties": {
                          "property": [
                            {
                              "name": "cleanDestinationDirectory",
                              "value": "false"
                            },
                            {
                              "name": "pathRules",
                              "value": "${'$'}{JOURNEY_NAME}_script.txt=>script"
                            },
                            {
                              "name": "revisionName",
                              "value": "buildNumber"
                            },
                            {
                              "name": "revisionValue",
                              "value": "%system.build.number%"
                            }
                          ],
                          "count": 4
                        },
                        "source-buildType": {
                          "id": "SecondProject_JourneyMakerV1"
                        }
                      }
                    ]
                  },
                  
                  	"requirements": {
                  "count": 1,
                  "requirement": [
                    {
                      "type"     : "contains",                    // valid: equals | exists | matches | contains | does-not-contain | etc.
                      "property" : "env.COMPATIBLE_JOURNEY_TYPES",// env.<VAR> exposes the agent’s environment variables
                      "value"    : "${'$'}{JOURNEY_TYPE}"
                    }
                  ]
                }
                
                
                }
                EOF
                )
                
                curl -i -sS \
                  -H "Authorization: Bearer ${'$'}{GIT_PAT_TOKEN}" \
                  -H "Content-Type: application/json" \
                  -X POST \
                  "localhost:8111/app/rest/buildTypes" \
                  -d "${'$'}{payload}"
            """.trimIndent()
            param("teamcity.kubernetes.executor.pull.policy", "")
        }
    }

    features {
        add {
            swabra {
            }
        }
    }

    requirements {
        add {
            doesNotExist("env.AGENT_NAME")
        }
    }
}
